@article{Curricle,
author = {Surbatovich, Milijana and Spargo, Naomi and Jia, Limin and Lucia, Brandon},
title = {A Type System for Safe Intermittent Computing},
year = {2023},
issue_date = {June 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {PLDI},
url = {https://doi.org/10.1145/3591250},
doi = {10.1145/3591250},
abstract = {Batteryless energy-harvesting devices enable computing in inaccessible environments, at a cost to programmability and correctness. These devices operate intermittently as energy is available, using a recovery system to save and restore state. Some program tasks must execute atomically w.r.t. power failures, re-executing if power fails before completion. Any re-execution should typically be idempotent—its behavior should match the behavior of a single execution. Thus, a key aspect of correct intermittent execution is identifying and recovering state causing undesired non-idempotence. Unfortunately, past intermittent systems take an ad-hoc approach, using unsound dataflow analyses or conservatively recovering all written state. Moreover, no prior work allows the programmer to directly specify idempotence requirements (including allowable non-idempotence). We present curricle, the first type system approach to safe intermittence, for Rust. Type level reasoning allows programmers to express requirements and retains alias information crucial for sound analyses. Curricle uses information flow and type qualifiers to reject programs causing undesired non-idempotence. We implement Curricle’s type system on top of Rust’s compiler, evaluating the prototype on benchmarks from prior work. We find that Curricle benefits application programmers by allowing them to express idempotence requirements that are checked to be satisfied, and that targeting programs checked with Curricle allows intermittent system designers to write simpler recovery systems that perform better.},
journal = {Proc. ACM Program. Lang.},
month = {jun},
articleno = {136},
numpages = {25},
keywords = {type systems, intermittent computing, information flow, energy harvesting}
}

@inproceedings{LatticePaper,
  author       = {Daniel W. H. James and
                  Ralf Hinze},
  editor       = {Zolt{\'{a}}n Horv{\'{a}}th and
                  Vikt{\'{o}}ria Zs{\'{o}}k and
                  Peter Achten and
                  Pieter W. M. Koopman},
  title        = {A Reflection-based Proof Tactic for Lattices in Coq},
  booktitle    = {Proceedings of the Tenth Symposium on Trends in Functional Programming,
                  {TFP} 2009, Kom{\'{a}}rno, Slovakia, June 2-4, 2009},
  series       = {Trends in Functional Programming},
  volume       = {10},
  pages        = {97--112},
  publisher    = {Intellect},
  year         = {2009},
  timestamp    = {Tue, 04 Jun 2013 08:01:28 +0200},
  biburl       = {https://dblp.org/rec/conf/sfp/JamesH09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{LatticeGitHub,
author = {John Wiegley},
title = {A Reflection-based Proof Tactic for Lattices in Coq},
year = {2023},
publisher = {GitHub},
howpublished = {\url{https://github.com/jwiegley/coq-lattice}},
commit = {2f935490174a34c7b12e0dc3a411a94e2d3ae242}
}

@inproceedings{PM2,
  author = {Justin Frank and Pierce Darragh},
  editor = {Milijana Surbatovich},
  title  = {Project Milestone 2},
  booktitle = {Proceedings of the First Occurrence of CMSC 838L},
  series = {Courses at UMD},
  volume = {3},
  year = {2024}
}